EVAL Class addNewClass: ( Integer subclass: 'SmallInt' variables: '' classVariables: '')
METHOD SmallInt
* arg
	^ arg multBySmallInt: self

!
METHOD SmallInt
+ arg
	^ arg addToSmallInt: self

!
METHOD SmallInt
- arg
	^ arg subtractFromSmallInt: self

!
METHOD SmallInt
// arg 
	| q |
	(arg = 0) ifTrue: [^ self error: 'division by zero'].
	self = 0 ifTrue: [^ 0].
	q <- self quo: arg.
	(q negative
		ifTrue: [q * arg ~= self]
		ifFalse: [q = 0 and: [self negative ~= arg negative]])
		ifTrue: [^ q - 1].
	^ q
!
METHOD SmallInt
< arg
	^ arg lessThanSmallInt: self

!
METHOD SmallInt
= arg
	^ arg equalToSmallInt: self

!
METHOD SmallInt
addToLP: arg
    ^ arg + self asLargeInteger
!
METHOD SmallInt
addToSmallInt: arg	
	" this only gets invoked when overflow occurs "
	^ arg asLargeInteger + self asLargeInteger
!
METHOD SmallInt
asFloat
	^ <50 Float self>
!
METHOD SmallInt
asLargeInteger | newValue n |
	newValue <- List new.
	n <- self abs.
	[n > 0] whileTrue: [ newValue add: (n rem: 100). n <- n quo: 100].
	newValue size = 0 ifTrue: [ newValue add: 0].
	^ self < 0 ifTrue: [ LargeNegative new: newValue asByteArray] 
		ifFalse: [ LargePositive new: newValue asByteArray ]
!
METHOD SmallInt
benchFib 
	"This is the straight Squeak tinyBenchmarks code.
                          See any version of Squeak for comparison"

                        "Handy send-heavy benchmark"
	"(result // seconds to run) = approx calls per second"
	" | r t |
	  t <- Object millisecondsToRun: [r <- 26 benchFib].
	  (r * 1000) // t"
	"138000 on a Mac 8100/100"
	^ self < 2
		ifTrue: [1] 
		ifFalse: [(self-1) benchFib + (self-2) benchFib + 1]

!
METHOD SmallInt
benchmark 

	"This is the straight Squeak tinyBenchmarks code.
                          See any version of Squeak for comparison"

    "Handy bytecode-heavy benchmark"
	"(500000 // time to run) = approx bytecodes per second"
	"5000000 // (Time millisecondsToRun: [10 benchmark]) * 1000"
	"3059000 on a Mac 8100/100"
    | size flags prime k count |
    size <- 8190.
    1 to: self do:
        [:iter |
        count <- 0.
        flags <- (Array new: size) atAllPut: true.
        1 to: size do:
            [:i | (flags at: i) ifTrue:
                [prime <- i+1.
                k <- i + prime.
                [k <= size] whileTrue:
                    [flags at: k put: false.
                    k <- k + prime].
                count <- count + 1]]].
    ^ count
!
METHOD SmallInt
compareToLP: arg
	^ self asLargeInteger compareToLP: arg
!
METHOD SmallInt
edit: cb | w m t|
   w <- Window new title: 'Integer editor'.
   w width: 300 height: 100.
   t <- Pane textArea. t setText: self printString.
   w setPane: t.
   m <- Menu new: 'edit'.
   m on: 'change to...' do: [cb value: t getText doIt ].
   w addMenu: m.
   w show

!
METHOD SmallInt
equalToSmallInt: arg
	^ <14 self arg>

!
METHOD SmallInt
inspect | w |
   w <- Window new title: 'Integer inspector'.
   w width: 200 height: 100.
   w setPane: (TextPanel new: self printString).
   w show

!
METHOD SmallInt
lessThanSmallInt: arg
	^ <13 arg self>

!
METHOD SmallInt
multByLP: arg
	^ self * arg
!
METHOD SmallInt
multBySmallInt: arg | r values |
   "must check for overflow "
   r <- <15 arg self>.
   r isNil ifTrue: [ r <- arg asLargeInteger * self asLargeInteger ].
   ^ r

!
METHOD SmallInt
printString
	(self < 0) ifTrue: [ ^ '-' + self negated printString].
	(self < 10) ifTrue: [ ^ (Char new: (self + 48)) asString ]
	ifFalse: [ ^ (self quo: 10) printString + (self rem: 10) printString ]

!
METHOD SmallInt
quo: arg
	(0 = arg) ifTrue: [^ self error: 'division by zero'].
	^ arg quoWithSmallInt: self

!
METHOD SmallInt
quoWithSmallInt: arg
	^ <11 arg self>

!
METHOD SmallInt
rem: arg
	(0 = arg) ifTrue: [^ self error: 'division by zero'].
	^ arg remWithSmallInt: self

!
METHOD SmallInt
remWithSmallInt: arg
	^ <12 arg self>

!
METHOD SmallInt
sleep " sleep for a while "
  <33 self>
!
METHOD SmallInt
subtractFromLP: arg
	" private internal method "
	^ arg - self asLargeInteger
!
METHOD SmallInt
subtractFromSmallInt: arg | r |
   " must check for overflow "
   r <- <16 arg self>.
   r isNil ifTrue: [ r <- arg asLargeInteger - self asLargeInteger ].
  ^ r

!
METHOD SmallInt
tinyBenchmarks
	"This is the straight Squeak tinyBenchmarks code.
                          See any version of Squeak for comparison"
	| t1 t2 r n1 n2 |
	n1 <- 1.
	[t1 <- Object millisecondsToRun: [n1 benchmark].
	t1 < 1000] whileTrue:[n1 <- n1 * 2]. "Note: #benchmark's runtime is about O(n)"

	n2 <- 28.
	[t2 <- Object millisecondsToRun: [r <- n2 benchFib].
	t2 < 1000] whileTrue:[n2 <- n2 + 1]. 
	"Note: #benchFib's runtime is about O(k^n),
		where k is the golden number = (1 + 5 sqrt) / 2 = 1.618...."

	^ ((n1 * 500000 * 1000) // t1) printString + ' bytecodes/sec; ' +
	  ((r * 1000) // t2) printString + ' sends/sec' 
!
METHOD SmallInt
to: limit
	^ Interval from: self to: limit by: 1

!
METHOD SmallInt
to: limit by: step
	^ Interval from: self to: limit by: step

!
METHOD SmallInt
to: limit do: aBlock  | i |
		" optimize arithmetic loops "
	i <- self.
	[ i <= limit ] whileTrue: [ aBlock value: i. i <- i + 1 ]

!
META SmallInt
new
	" can't create this way, return zero "
	^ 0

!
